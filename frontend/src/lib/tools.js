import { tavily } from "@tavily/core";
import { YoutubeTranscript } from "youtube-transcript";
import { WebcrawlerClient } from "webcrawlerapi-js";
import * as cheerio from "cheerio";
import axios from "axios";

const tvly = tavily({ apiKey: process.env.TAVILY_API_KEY });

const usaStatesAndCities = {
  Alabama: {
    shorten: "AL",
    cities: [
      "Alexander City",
      "Andalusia",
      "Anniston",
      "Athens",
      "Atmore",
      "Auburn",
      "Bessemer",
      "Birmingham",
      "Chickasaw",
      "Clanton",
      "Cullman",
      "Decatur",
      "Demopolis",
      "Dothan",
      "Enterprise",
      "Eufaula",
      "Florence",
      "Fort Payne",
      "Gadsden",
      "Greenville",
      "Guntersville",
      "Huntsville",
      "Jasper",
      "Marion",
      "Mobile",
      "Montgomery",
      "Opelika",
      "Ozark",
      "Phenix City",
      "Prichard",
      "Scottsboro",
      "Selma",
      "Sheffield",
      "Sylacauga",
      "Talladega",
      "Troy",
      "Tuscaloosa",
      "Tuscumbia",
      "Tuskegee",
    ],
  },
  Alaska: {
    shorten: "AK",
    cities: [
      "Anchorage",
      "Cordova",
      "Fairbanks",
      "Haines",
      "Homer",
      "Juneau",
      "Ketchikan",
      "Kodiak",
      "Kotzebue",
      "Nome",
      "Palmer",
      "Seward",
      "Sitka",
      "Skagway",
      "Valdez",
    ],
  },
  Arizona: {
    shorten: "AZ",
    cities: [
      "Ajo",
      "Avondale",
      "Bisbee",
      "Casa Grande",
      "Chandler",
      "Clifton",
      "Douglas",
      "Flagstaff",
      "Florence",
      "Gila Bend",
      "Glendale",
      "Globe",
      "Kingman",
      "Lake Havasu City",
      "Mesa",
      "Nogales",
      "Oraibi",
      "Phoenix",
      "Prescott",
      "Scottsdale",
      "Sierra Vista",
      "Tempe",
      "Tombstone",
      "Tucson",
      "Walpi",
      "Window Rock",
      "Winslow",
      "Yuma",
    ],
  },
  Arkansas: {
    shorten: "AR",
    cities: [
      "Arkadelphia",
      "Arkansas Post",
      "Batesville",
      "Benton",
      "Blytheville",
      "Camden",
      "Conway",
      "Crossett",
      "El Dorado",
      "Fayetteville",
      "Forrest City",
      "Fort Smith",
      "Harrison",
      "Helena",
      "Hope",
      "Hot Springs",
      "Jacksonville",
      "Jonesboro",
      "Little Rock",
      "Magnolia",
      "Morrilton",
      "Newport",
      "North Little Rock",
      "Osceola",
      "Pine Bluff",
      "Rogers",
      "Searcy",
      "Stuttgart",
      "Van Buren",
      "West Memphis",
    ],
  },
  California: {
    shorten: "CA",
    cities: [
      "Alameda",
      "Alhambra",
      "Anaheim",
      "Antioch",
      "Arcadia",
      "Bakersfield",
      "Barstow",
      "Belmont",
      "Berkeley",
      "Beverly Hills",
      "Brea",
      "Buena Park",
      "Burbank",
      "Calexico",
      "Calistoga",
      "Carlsbad",
      "Carmel",
      "Chico",
      "Chula Vista",
      "Claremont",
      "Compton",
      "Concord",
      "Corona",
      "Coronado",
      "Costa Mesa",
      "Culver City",
      "Daly City",
      "Davis",
      "Downey",
      "El Centro",
      "El Cerrito",
      "El Monte",
      "Escondido",
      "Eureka",
      "Fairfield",
      "Fontana",
      "Fremont",
      "Fresno",
      "Fullerton",
      "Garden Grove",
      "Glendale",
      "Hayward",
      "Hollywood",
      "Huntington Beach",
      "Indio",
      "Inglewood",
      "Irvine",
      "La Habra",
      "Laguna Beach",
      "Lancaster",
      "Livermore",
      "Lodi",
      "Lompoc",
      "Long Beach",
      "Los Angeles",
      "Malibu",
      "Martinez",
      "Marysville",
      "Menlo Park",
      "Merced",
      "Modesto",
      "Monterey",
      "Mountain View",
      "Napa",
      "Needles",
      "Newport Beach",
      "Norwalk",
      "Novato",
      "Oakland",
      "Oceanside",
      "Ojai",
      "Ontario",
      "Orange",
      "Oroville",
      "Oxnard",
      "Pacific Grove",
      "Palm Springs",
      "Palmdale",
      "Palo Alto",
      "Pasadena",
      "Petaluma",
      "Pomona",
      "Port Hueneme",
      "Rancho Cucamonga",
      "Red Bluff",
      "Redding",
      "Redlands",
      "Redondo Beach",
      "Redwood City",
      "Richmond",
      "Riverside",
      "Roseville",
      "Sacramento",
      "Salinas",
      "San Bernardino",
      "San Clemente",
      "San Diego",
      "San Fernando",
      "San Francisco",
      "San Gabriel",
      "San Jose",
      "San Juan Capistrano",
      "San Leandro",
      "San Luis Obispo",
      "San Marino",
      "San Mateo",
      "San Pedro",
      "San Rafael",
      "San Simeon",
      "Santa Ana",
      "Santa Barbara",
      "Santa Clara",
      "Santa Clarita",
      "Santa Cruz",
      "Santa Monica",
      "Santa Rosa",
      "Sausalito",
      "Simi Valley",
      "Sonoma",
      "South San Francisco",
      "Stockton",
      "Sunnyvale",
      "Susanville",
      "Thousand Oaks",
      "Torrance",
      "Turlock",
      "Ukiah",
      "Vallejo",
      "Ventura",
      "Victorville",
      "Visalia",
      "Walnut Creek",
      "Watts",
      "West Covina",
      "Whittier",
      "Woodland",
      "Yorba Linda",
      "Yuba City",
    ],
  },
  Colorado: {
    shorten: "CO",
    cities: [
      "Alamosa",
      "Aspen",
      "Aurora",
      "Boulder",
      "Breckenridge",
      "Brighton",
      "Canon City",
      "Central City",
      "Climax",
      "Colorado Springs",
      "Cortez",
      "Cripple Creek",
      "Denver",
      "Durango",
      "Englewood",
      "Estes Park",
      "Fort Collins",
      "Fort Morgan",
      "Georgetown",
      "Glenwood Springs",
      "Golden",
      "Grand Junction",
      "Greeley",
      "Gunnison",
      "La Junta",
      "Leadville",
      "Littleton",
      "Longmont",
      "Loveland",
      "Montrose",
      "Ouray",
      "Pagosa Springs",
      "Pueblo",
      "Silverton",
      "Steamboat Springs",
      "Sterling",
      "Telluride",
      "Trinidad",
      "Vail",
      "Walsenburg",
      "Westminster",
    ],
  },
  Connecticut: {
    shorten: "CT",
    cities: [
      "Ansonia",
      "Berlin",
      "Bloomfield",
      "Branford",
      "Bridgeport",
      "Bristol",
      "Coventry",
      "Danbury",
      "Darien",
      "Derby",
      "East Hartford",
      "East Haven",
      "Enfield",
      "Fairfield",
      "Farmington",
      "Greenwich",
      "Groton",
      "Guilford",
      "Hamden",
      "Hartford",
      "Lebanon",
      "Litchfield",
      "Manchester",
      "Mansfield",
      "Meriden",
      "Middletown",
      "Milford",
      "Mystic",
      "Naugatuck",
      "New Britain",
      "New Haven",
      "New London",
      "North Haven",
      "Norwalk",
      "Norwich",
      "Old Saybrook",
      "Orange",
      "Seymour",
      "Shelton",
      "Simsbury",
      "Southington",
      "Stamford",
      "Stonington",
      "Stratford",
      "Torrington",
      "Wallingford",
      "Waterbury",
      "Waterford",
      "Watertown",
      "West Hartford",
      "West Haven",
      "Westport",
      "Wethersfield",
      "Willimantic",
      "Windham",
      "Windsor",
      "Windsor Locks",
      "Winsted",
    ],
  },
  Delaware: {
    shorten: "DE",
    cities: [
      "Dover",
      "Lewes",
      "Milford",
      "New Castle",
      "Newark",
      "Smyrna",
      "Wilmington",
      "East Cleveland",
      "East Liverpool",
      "Elyria",
      "Euclid",
      "Findlay",
      "Gallipolis",
      "Greenville",
      "Hamilton",
      "Kent",
      "Kettering",
      "Lakewood",
      "Lancaster",
      "Lima",
      "Lorain",
      "Mansfield",
      "Marietta",
      "Marion",
      "Martins Ferry",
      "Massillon",
      "Mentor",
      "Middletown",
      "Milan",
      "Mount Vernon",
      "New Philadelphia",
      "Newark",
      "Niles",
      "North College Hill",
      "Norwalk",
      "Oberlin",
      "Painesville",
      "Parma",
      "Piqua",
      "Portsmouth",
      "Put-in-Bay",
      "Salem",
      "Sandusky",
      "Shaker Heights",
      "Springfield",
      "Steubenville",
      "Tiffin",
      "Toledo",
      "Urbana",
      "Warren",
      "Wooster",
      "Worthington",
      "Xenia",
      "Yellow Springs",
      "Youngstown",
      "Zanesville",
    ],
  },
  Florida: {
    shorten: "FL",
    cities: [
      "Apalachicola",
      "Bartow",
      "Belle Glade",
      "Boca Raton",
      "Bradenton",
      "Cape Coral",
      "Clearwater",
      "Cocoa Beach",
      "Cocoa-Rockledge",
      "Coral Gables",
      "Daytona Beach",
      "De Land",
      "Deerfield Beach",
      "Delray Beach",
      "Fernandina Beach",
      "Fort Lauderdale",
      "Fort Myers",
      "Fort Pierce",
      "Fort Walton Beach",
      "Gainesville",
      "Hallandale Beach",
      "Hialeah",
      "Hollywood",
      "Homestead",
      "Jacksonville",
      "Key West",
      "Lake City",
      "Lake Wales",
      "Lakeland",
      "Largo",
      "Melbourne",
      "Miami",
      "Miami Beach",
      "Naples",
      "New Smyrna Beach",
      "Ocala",
      "Orlando",
      "Ormond Beach",
      "Palatka",
      "Palm Bay",
      "Palm Beach",
      "Panama City",
      "Pensacola",
      "Pompano Beach",
      "Saint Augustine",
      "Saint Petersburg",
      "Sanford",
      "Sarasota",
      "Sebring",
      "Tallahassee",
      "Tampa",
      "Tarpon Springs",
      "Titusville",
      "Venice",
      "West Palm Beach",
      "White Springs",
      "Winter Haven",
      "Winter Park",
    ],
  },
  Georgia: {
    shorten: "GA",
    cities: [
      "Albany",
      "Americus",
      "Andersonville",
      "Athens",
      "Atlanta",
      "Augusta",
      "Bainbridge",
      "Blairsville",
      "Brunswick",
      "Calhoun",
      "Carrollton",
      "Columbus",
      "Dahlonega",
      "Dalton",
      "Darien",
      "Decatur",
      "Douglas",
      "East Point",
      "Fitzgerald",
      "Fort Valley",
      "Gainesville",
      "La Grange",
      "Macon",
      "Marietta",
      "Milledgeville",
      "Plains",
      "Rome",
      "Savannah",
      "Toccoa",
      "Valdosta",
      "Warm Springs",
      "Warner Robins",
    ],
  },
  Washington: {
    shorten: "WA",
    cities: [
      "Waycross",
      "Wilmington",
      "Wilson",
      "Winston-Salem",
      "West Chester",
      "Wilkes-Barre",
      "Williamsport",
      "York",
      "Aberdeen",
      "Anacortes",
      "Auburn",
      "Bellevue",
      "Bellingham",
      "Bremerton",
      "Centralia",
      "Coulee Dam",
      "Coupeville",
      "Ellensburg",
      "Ephrata",
      "Everett",
      "Hoquiam",
      "Kelso",
      "Kennewick",
      "Longview",
      "Moses Lake",
      "Oak Harbor",
      "Olympia",
      "Pasco",
      "Point Roberts",
      "Port Angeles",
      "Pullman",
      "Puyallup",
      "Redmond",
      "Renton",
      "Richland",
      "Seattle",
      "Spokane",
      "Tacoma",
      "Vancouver",
      "Walla Walla",
      "Wenatchee",
      "Yakima",
    ],
  },
  Hawaii: {
    shorten: "HI",
    cities: [
      "Hanalei",
      "Hilo",
      "Honaunau",
      "Honolulu",
      "Kahului",
      "Kaneohe",
      "Kapaa",
      "Kawaihae",
      "Lahaina",
      "Laie",
      "Wahiawa",
      "Wailuku",
      "Waimea",
    ],
  },
  Idaho: {
    shorten: "ID",
    cities: [
      "Blackfoot",
      "Boise",
      "Bonners Ferry",
      "Caldwell",
      "Coeur d’Alene",
      "Idaho City",
      "Idaho Falls",
      "Kellogg",
      "Lewiston",
      "Moscow",
      "Nampa",
      "Pocatello",
      "Priest River",
      "Rexburg",
      "Sun Valley",
      "Twin Falls",
    ],
  },
  Illinois: {
    shorten: "IL",
    cities: [
      "Alton",
      "Arlington Heights",
      "Arthur",
      "Aurora",
      "Belleville",
      "Belvidere",
      "Bloomington",
      "Brookfield",
      "Cahokia",
      "Cairo",
      "Calumet City",
      "Canton",
      "Carbondale",
      "Carlinville",
      "Carthage",
      "Centralia",
      "Champaign",
      "Charleston",
      "Chester",
      "Chicago",
      "Chicago Heights",
      "Cicero",
      "Collinsville",
      "Danville",
      "Decatur",
      "DeKalb",
      "Des Plaines",
      "Dixon",
      "East Moline",
      "East Saint Louis",
      "Effingham",
      "Elgin",
      "Elmhurst",
      "Evanston",
      "Freeport",
      "Galena",
      "Galesburg",
      "Glen Ellyn",
      "Glenview",
      "Granite City",
      "Harrisburg",
      "Herrin",
      "Highland Park",
      "Jacksonville",
      "Joliet",
      "Kankakee",
      "Kaskaskia",
      "Kewanee",
      "La Salle",
      "Lake Forest",
      "Libertyville",
      "Lincoln",
      "Lisle",
      "Lombard",
      "Macomb",
      "Mattoon",
      "Moline",
      "Monmouth",
      "Mount Vernon",
      "Mundelein",
      "Naperville",
      "Nauvoo",
      "Normal",
      "North Chicago",
      "Oak Park",
    ],
  },
  Oregon: {
    shorten: "OR",
    cities: [
      "Ottawa",
      "Palatine",
      "Park Forest",
      "Park Ridge",
      "Pekin",
      "Peoria",
      "Petersburg",
      "Pontiac",
      "Quincy",
      "Rantoul",
      "River Forest",
      "Rock Island",
      "Rockford",
      "Salem",
      "Shawneetown",
      "Skokie",
      "South Holland",
      "Springfield",
      "Streator",
      "Summit",
      "Urbana",
      "Vandalia",
      "Virden",
      "Waukegan",
      "Wheaton",
      "Wilmette",
      "Winnetka",
      "Wood River",
      "Zion",
      "Albany",
      "Ashland",
      "Astoria",
      "Baker City",
      "Beaverton",
      "Bend",
      "Brookings",
      "Burns",
      "Coos Bay",
      "Corvallis",
      "Eugene",
      "Grants Pass",
      "Hillsboro",
      "Hood River",
      "Jacksonville",
      "John Day",
      "Klamath Falls",
      "La Grande",
      "Lake Oswego",
      "Lakeview",
      "McMinnville",
      "Medford",
      "Newberg",
      "Newport",
      "Ontario",
      "Oregon City",
      "Pendleton",
      "Port Orford",
      "Portland",
      "Prineville",
      "Redmond",
      "Reedsport",
      "Roseburg",
      "Salem",
      "Seaside",
      "Springfield",
      "The Dalles",
      "Tillamook",
    ],
  },
  Indiana: {
    shorten: "IN",
    cities: [
      "Anderson",
      "Bedford",
      "Bloomington",
      "Columbus",
      "Connersville",
      "Corydon",
      "Crawfordsville",
      "East Chicago",
      "Elkhart",
      "Elwood",
      "Evansville",
      "Fort Wayne",
      "French Lick",
      "Gary",
      "Geneva",
      "Goshen",
      "Greenfield",
      "Hammond",
      "Hobart",
      "Huntington",
      "Indianapolis",
      "Jeffersonville",
      "Kokomo",
      "Lafayette",
      "Madison",
      "Marion",
      "Michigan City",
      "Mishawaka",
      "Muncie",
      "Nappanee",
      "Nashville",
      "New Albany",
      "New Castle",
      "New Harmony",
      "Peru",
      "Plymouth",
      "Richmond",
      "Santa Claus",
      "Shelbyville",
      "South Bend",
      "Terre Haute",
      "Valparaiso",
      "Vincennes",
      "Wabash",
      "West Lafayette",
      "Jeannette",
      "Jim Thorpe",
      "Johnstown",
      "Lancaster",
      "Lebanon",
      "Levittown",
      "Lewistown",
      "Lock Haven",
      "Lower Southampton",
      "McKeesport",
      "Meadville",
      "Middletown",
      "Monroeville",
      "Nanticoke",
      "New Castle",
      "New Hope",
      "New Kensington",
      "Norristown",
      "Oil City",
      "Philadelphia",
      "Phoenixville",
      "Pittsburgh",
      "Pottstown",
      "Pottsville",
      "Reading",
      "Scranton",
      "Shamokin",
      "Sharon",
      "State College",
      "Stroudsburg",
      "Sunbury",
      "Swarthmore",
      "Tamaqua",
      "Titusville",
      "Uniontown",
      "Warren",
    ],
  },
  Iowa: {
    shorten: "IA",
    cities: [
      "Amana Colonies",
      "Ames",
      "Boone",
      "Burlington",
      "Cedar Falls",
      "Cedar Rapids",
      "Charles City",
      "Cherokee",
      "Clinton",
      "Council Bluffs",
      "Davenport",
      "Des Moines",
      "Dubuque",
      "Estherville",
      "Fairfield",
      "Fort Dodge",
      "Grinnell",
      "Indianola",
      "Iowa City",
      "Keokuk",
      "Mason City",
      "Mount Pleasant",
      "Muscatine",
      "Newton",
      "Oskaloosa",
      "Ottumwa",
      "Sioux City",
      "Waterloo",
      "Webster City",
      "West Des Moines",
    ],
  },
  Kansas: {
    shorten: "KS",
    cities: [
      "Abilene",
      "Arkansas City",
      "Atchison",
      "Chanute",
      "Coffeyville",
      "Council Grove",
      "Dodge City",
      "Emporia",
      "Fort Scott",
      "Garden City",
      "Great Bend",
      "Hays",
      "Hutchinson",
      "Independence",
      "Junction City",
      "Kansas City",
      "Lawrence",
      "Leavenworth",
      "Liberal",
      "Manhattan",
      "McPherson",
      "Medicine Lodge",
      "Newton",
      "Olathe",
      "Osawatomie",
      "Ottawa",
      "Overland Park",
      "Pittsburg",
      "Salina",
      "Shawnee",
      "Smith Center",
      "Topeka",
      "Wichita",
    ],
  },
  Kentucky: {
    shorten: "KY",
    cities: [
      "Ashland",
      "Barbourville",
      "Bardstown",
      "Berea",
      "Boonesborough",
      "Bowling Green",
      "Campbellsville",
      "Covington",
      "Danville",
      "Elizabethtown",
      "Frankfort",
      "Harlan",
      "Harrodsburg",
      "Hazard",
      "Henderson",
      "Hodgenville",
      "Hopkinsville",
      "Lexington",
      "Louisville",
      "Mayfield",
      "Maysville",
      "Middlesboro",
      "Newport",
      "Owensboro",
      "Paducah",
      "Paris",
      "Richmond",
    ],
  },
  Louisiana: {
    shorten: "LA",
    cities: [
      "Abbeville",
      "Alexandria",
      "Bastrop",
      "Baton Rouge",
      "Bogalusa",
      "Bossier City",
      "Gretna",
      "Houma",
      "Lafayette",
      "Lake Charles",
      "Monroe",
      "Morgan City",
      "Natchitoches",
      "New Iberia",
      "New Orleans",
      "Opelousas",
      "Ruston",
      "Saint Martinville",
      "Shreveport",
      "Thibodaux",
    ],
  },
  Maine: {
    shorten: "ME",
    cities: [
      "Auburn",
      "Augusta",
      "Bangor",
      "Bar Harbor",
      "Bath",
      "Belfast",
      "Biddeford",
      "Boothbay Harbor",
      "Brunswick",
      "Calais",
      "Caribou",
      "Castine",
      "Eastport",
      "Ellsworth",
      "Farmington",
      "Fort Kent",
      "Gardiner",
      "Houlton",
      "Kennebunkport",
      "Kittery",
      "Lewiston",
      "Lubec",
      "Machias",
      "Orono",
      "Portland",
      "Presque Isle",
      "Rockland",
      "Rumford",
      "Saco",
      "Scarborough",
      "Waterville",
      "York",
    ],
  },
  Maryland: {
    shorten: "MD",
    cities: [
      "Aberdeen",
      "Annapolis",
      "Baltimore",
      "Bethesda-Chevy Chase",
      "Bowie",
      "Cambridge",
      "Catonsville",
      "College Park",
      "Columbia",
      "Cumberland",
      "Easton",
      "Elkton",
      "Emmitsburg",
      "Frederick",
      "Greenbelt",
      "Hagerstown",
      "Hyattsville",
      "Laurel",
      "Oakland",
      "Ocean City",
      "Rockville",
      "Saint Marys City",
      "Salisbury",
      "Silver Spring",
      "Takoma Park",
      "Towson",
      "Westminster",
    ],
  },
  Massachusetts: {
    shorten: "MA",
    cities: [
      "Abington",
      "Adams",
      "Amesbury",
      "Amherst",
      "Andover",
      "Arlington",
      "Athol",
      "Attleboro",
      "Barnstable",
      "Bedford",
      "Beverly",
      "Boston",
      "Bourne",
      "Braintree",
      "Brockton",
      "Brookline",
      "Cambridge",
      "Canton",
      "Charlestown",
      "Chelmsford",
      "Chelsea",
      "Chicopee",
      "Clinton",
      "Cohasset",
      "Concord",
      "Danvers",
      "Dartmouth",
      "Dedham",
      "Dennis",
      "Duxbury",
      "Eastham",
      "Edgartown",
      "Everett",
      "Fairhaven",
      "Fall River",
      "Falmouth",
      "Fitchburg",
      "Framingham",
      "Gloucester",
      "Great Barrington",
      "Greenfield",
      "Groton",
      "Harwich",
      "Haverhill",
      "Hingham",
      "Holyoke",
      "Hyannis",
      "Ipswich",
      "Lawrence",
      "Lenox",
      "Leominster",
      "Lexington",
      "Lowell",
      "Ludlow",
      "Lynn",
      "Malden",
      "Marblehead",
      "Marlborough",
      "Medford",
      "Milton",
      "Nahant",
      "Natick",
      "New Bedford",
      "Newburyport",
      "Newton",
      "North Adams",
      "Northampton",
      "Norton",
      "Norwood",
      "Peabody",
      "Pittsfield",
      "Plymouth",
      "Provincetown",
      "Quincy",
      "Randolph",
      "Revere",
      "Salem",
      "Sandwich",
      "Saugus",
      "Somerville",
      "South Hadley",
      "Springfield",
      "Stockbridge",
      "Stoughton",
      "Sturbridge",
      "Sudbury",
      "Taunton",
      "Tewksbury",
      "Truro",
      "Watertown",
      "Webster",
      "Wellesley",
      "Wellfleet",
      "West Bridgewater",
      "West Springfield",
      "Westfield",
      "Weymouth",
      "Whitman",
      "Williamstown",
      "Woburn",
      "Woods Hole",
      "Worcester",
    ],
  },
  Michigan: {
    shorten: "MI",
    cities: [
      "Adrian",
      "Alma",
      "Ann Arbor",
      "Battle Creek",
      "Bay City",
      "Benton Harbor",
      "Bloomfield Hills",
      "Cadillac",
      "Charlevoix",
      "Cheboygan",
      "Dearborn",
      "Detroit",
      "East Lansing",
      "Eastpointe",
      "Ecorse",
      "Escanaba",
      "Flint",
      "Grand Haven",
      "Grand Rapids",
      "Grayling",
      "Grosse Pointe",
      "Hancock",
      "Highland Park",
      "Holland",
      "Houghton",
      "Interlochen",
      "Iron Mountain",
      "Ironwood",
      "Ishpeming",
      "Jackson",
      "Kalamazoo",
      "Lansing",
      "Livonia",
      "Ludington",
      "Mackinaw City",
      "Manistee",
      "Marquette",
      "Menominee",
      "Midland",
      "Monroe",
      "Mount Clemens",
      "Mount Pleasant",
      "Muskegon",
      "Niles",
      "Petoskey",
      "Pontiac",
      "Port Huron",
      "Royal Oak",
      "Saginaw",
      "Saint Ignace",
      "Saint Joseph",
      "Sault Sainte Marie",
      "Traverse City",
      "Trenton",
      "Warren",
      "Wyandotte",
      "Ypsilanti",
    ],
  },
  Minnesota: {
    shorten: "MN",
    cities: [
      "Albert Lea",
      "Alexandria",
      "Austin",
      "Bemidji",
      "Bloomington",
      "Brainerd",
      "Crookston",
      "Duluth",
      "Ely",
      "Eveleth",
      "Faribault",
      "Fergus Falls",
      "Hastings",
      "Hibbing",
      "International Falls",
      "Little Falls",
      "Mankato",
      "Minneapolis",
      "Moorhead",
      "New Ulm",
      "Northfield",
      "Owatonna",
      "Pipestone",
      "Red Wing",
      "Rochester",
      "Saint Cloud",
      "Saint Paul",
      "Sauk Centre",
      "South Saint Paul",
      "Stillwater",
    ],
  },
  Virginia: {
    shorten: "VA",
    cities: [
      "Willmar",
      "Winona",
      "Abingdon",
      "Alexandria",
      "Bristol",
      "Charlottesville",
      "Chesapeake",
      "Danville",
      "Fairfax",
      "Falls Church",
      "Fredericksburg",
      "Hampton",
      "Hanover",
      "Hopewell",
      "Lexington",
      "Lynchburg",
      "Manassas",
      "Martinsville",
      "New Market",
      "Newport News",
      "Norfolk",
      "Petersburg",
      "Portsmouth",
      "Reston",
      "Richmond",
      "Roanoke",
      "Staunton",
      "Suffolk",
      "Virginia Beach",
      "Waynesboro",
      "Williamsburg",
      "Winchester",
    ],
  },
  Mississippi: {
    shorten: "MS",
    cities: [
      "Bay Saint Louis",
      "Biloxi",
      "Canton",
      "Clarksdale",
      "Columbia",
      "Columbus",
      "Corinth",
      "Greenville",
      "Greenwood",
      "Grenada",
      "Gulfport",
      "Hattiesburg",
      "Holly Springs",
      "Jackson",
      "Laurel",
      "Meridian",
      "Natchez",
      "Ocean Springs",
      "Oxford",
      "Pascagoula",
      "Pass Christian",
      "Philadelphia",
      "Port Gibson",
      "Starkville",
      "Tupelo",
      "Vicksburg",
      "West Point",
      "Yazoo City",
    ],
  },
  Missouri: {
    shorten: "MO",
    cities: [
      "Boonville",
      "Branson",
      "Cape Girardeau",
      "Carthage",
      "Chillicothe",
      "Clayton",
      "Columbia",
      "Excelsior Springs",
      "Ferguson",
      "Florissant",
      "Fulton",
      "Hannibal",
      "Independence",
      "Jefferson City",
      "Joplin",
      "Kansas City",
      "Kirksville",
      "Lamar",
      "Lebanon",
      "Lexington",
      "Maryville",
      "Mexico",
      "Monett",
      "Neosho",
      "New Madrid",
      "Rolla",
      "Saint Charles",
      "Saint Joseph",
      "Saint Louis",
      "Sainte Genevieve",
      "Salem",
      "Sedalia",
      "Springfield",
      "Warrensburg",
      "West Plains",
    ],
  },
  Montana: {
    shorten: "MT",
    cities: [
      "Anaconda",
      "Billings",
      "Bozeman",
      "Butte",
      "Dillon",
      "Fort Benton",
      "Glendive",
      "Great Falls",
      "Havre",
      "Helena",
      "Kalispell",
      "Lewistown",
      "Livingston",
      "Miles City",
      "Missoula",
      "Virginia City",
    ],
  },
  Nebraska: {
    shorten: "NE",
    cities: [
      "Beatrice",
      "Bellevue",
      "Boys Town",
      "Chadron",
      "Columbus",
      "Fremont",
      "Grand Island",
      "Hastings",
      "Kearney",
      "Lincoln",
      "McCook",
      "Minden",
      "Nebraska City",
      "Norfolk",
      "North Platte",
      "Omaha",
      "Plattsmouth",
      "Red Cloud",
      "Sidney",
    ],
  },
  Nevada: {
    shorten: "NV",
    cities: [
      "Boulder City",
      "Carson City",
      "Elko",
      "Ely",
      "Fallon",
      "Genoa",
      "Goldfield",
      "Henderson",
      "Las Vegas",
      "North Las Vegas",
      "Reno",
      "Sparks",
      "Virginia City",
      "Winnemucca",
    ],
  },
  "New Hampshire": {
    shorten: "NH",
    cities: [
      "Berlin",
      "Claremont",
      "Concord",
      "Derry",
      "Dover",
      "Durham",
      "Exeter",
      "Franklin",
      "Hanover",
      "Hillsborough",
      "Keene",
      "Laconia",
      "Lebanon",
      "Manchester",
      "Nashua",
      "Peterborough",
      "Plymouth",
      "Portsmouth",
      "Rochester",
      "Salem",
      "Somersworth",
    ],
  },
  "New Jersey": {
    shorten: "NJ",
    cities: [
      "Asbury Park",
      "Atlantic City",
      "Bayonne",
      "Bloomfield",
      "Bordentown",
      "Bound Brook",
      "Bridgeton",
      "Burlington",
      "Caldwell",
      "Camden",
      "Cape May",
      "Clifton",
      "Cranford",
      "East Orange",
      "Edison",
      "Elizabeth",
      "Englewood",
      "Fort Lee",
      "Glassboro",
      "Hackensack",
      "Haddonfield",
      "Hoboken",
      "Irvington",
      "Jersey City",
      "Lakehurst",
      "Lakewood",
      "Long Beach",
      "Long Branch",
      "Madison",
      "Menlo Park",
      "Millburn",
      "Millville",
      "Montclair",
      "Morristown",
      "Mount Holly",
      "New Brunswick",
      "New Milford",
      "Newark",
      "Ocean City",
      "Orange",
      "Parsippany–Troy Hills",
      "Passaic",
      "Paterson",
      "Perth Amboy",
      "Plainfield",
      "Princeton",
      "Ridgewood",
      "Roselle",
      "Rutherford",
      "Salem",
      "Somerville",
      "South Orange Village",
      "Totowa",
      "Trenton",
      "Union",
      "Union City",
      "Vineland",
      "Wayne",
      "Weehawken",
      "West New York",
      "West Orange",
      "Willingboro",
      "Woodbridge",
    ],
  },
  "New Mexico": {
    shorten: "NM",
    cities: [
      "Acoma",
      "Alamogordo",
      "Albuquerque",
      "Artesia",
      "Belen",
      "Carlsbad",
      "Clovis",
      "Deming",
      "Farmington",
      "Gallup",
      "Grants",
      "Hobbs",
      "Las Cruces",
      "Las Vegas",
      "Los Alamos",
      "Lovington",
      "Portales",
      "Raton",
      "Roswell",
      "Santa Fe",
      "Shiprock",
      "Silver City",
      "Socorro",
      "Taos",
      "Truth or Consequences",
      "Tucumcari",
    ],
  },
  "New York": {
    shorten: "NY",
    cities: [
      "Albany",
      "Amsterdam",
      "Auburn",
      "Babylon",
      "Batavia",
      "Beacon",
      "Bedford",
      "Binghamton",
      "Bronx",
      "Brooklyn",
      "Buffalo",
      "Chautauqua",
      "Cheektowaga",
      "Clinton",
      "Cohoes",
      "Coney Island",
      "Cooperstown",
      "Corning",
      "Cortland",
      "Crown Point",
      "Dunkirk",
      "East Aurora",
      "East Hampton",
      "Eastchester",
      "Elmira",
      "Flushing",
      "Forest Hills",
      "Fredonia",
      "Garden City",
      "Geneva",
      "Glens Falls",
      "Gloversville",
      "Great Neck",
      "Hammondsport",
      "Harlem",
      "Hempstead",
      "Herkimer",
      "Hudson",
      "Huntington",
      "Hyde Park",
      "Ilion",
      "Ithaca",
      "Jamestown",
      "Johnstown",
      "Kingston",
      "Lackawanna",
      "Lake Placid",
      "Levittown",
      "Lockport",
      "Mamaroneck",
      "Manhattan",
      "Massena",
      "Middletown",
      "Mineola",
      "Mount Vernon",
      "New Paltz",
      "New Rochelle",
      "New Windsor",
      "New York City",
      "Newburgh",
      "Niagara Falls",
      "North Hempstead",
      "Nyack",
      "Ogdensburg",
      "Olean",
      "Oneida",
      "Oneonta",
      "Ossining",
      "Oswego",
      "Oyster Bay",
      "Palmyra",
      "Peekskill",
      "Plattsburgh",
      "Port Washington",
      "Potsdam",
      "Poughkeepsie",
      "Queens",
      "Rensselaer",
      "Rochester",
      "Rome",
      "Rotterdam",
      "Rye",
      "Sag Harbor",
      "Saranac Lake",
      "Saratoga Springs",
      "Scarsdale",
      "Schenectady",
      "Seneca Falls",
      "Southampton",
      "Staten Island",
      "Stony Brook",
      "Stony Point",
      "Syracuse",
      "Tarrytown",
      "Ticonderoga",
      "Tonawanda",
      "Troy",
      "Utica",
      "Watertown",
      "Watervliet",
      "Watkins Glen",
      "West Seneca",
      "White Plains",
      "Woodstock",
      "Yonkers",
    ],
  },
  "North Carolina": {
    shorten: "NC",
    cities: [
      "Asheboro",
      "Asheville",
      "Bath",
      "Beaufort",
      "Boone",
      "Burlington",
      "Chapel Hill",
      "Charlotte",
      "Concord",
      "Durham",
      "Edenton",
      "Elizabeth City",
      "Fayetteville",
      "Gastonia",
      "Goldsboro",
      "Greensboro",
      "Greenville",
      "Halifax",
      "Henderson",
      "Hickory",
      "High Point",
      "Hillsborough",
      "Jacksonville",
      "Kinston",
      "Kitty Hawk",
      "Lumberton",
      "Morehead City",
      "Morganton",
      "Nags Head",
      "New Bern",
      "Pinehurst",
      "Raleigh",
      "Rocky Mount",
      "Salisbury",
      "Shelby",
    ],
  },
  "North Dakota": {
    shorten: "ND",
    cities: [
      "Bismarck",
      "Devils Lake",
      "Dickinson",
      "Fargo",
      "Grand Forks",
      "Jamestown",
      "Mandan",
      "Minot",
      "Rugby",
      "Valley City",
      "Wahpeton",
      "Williston",
    ],
  },
  Ohio: {
    shorten: "OH",
    cities: [
      "Akron",
      "Alliance",
      "Ashtabula",
      "Athens",
      "Barberton",
      "Bedford",
      "Bellefontaine",
      "Bowling Green",
      "Canton",
      "Chillicothe",
      "Cincinnati",
      "Cleveland",
      "Cleveland Heights",
      "Columbus",
      "Conneaut",
      "Cuyahoga Falls",
      "Dayton",
      "Defiance",
    ],
  },
  Oklahoma: {
    shorten: "OK",
    cities: [
      "Ada",
      "Altus",
      "Alva",
      "Anadarko",
      "Ardmore",
      "Bartlesville",
      "Bethany",
      "Chickasha",
      "Claremore",
      "Clinton",
      "Cushing",
      "Duncan",
      "Durant",
      "Edmond",
      "El Reno",
      "Elk City",
      "Enid",
      "Eufaula",
      "Frederick",
      "Guthrie",
      "Guymon",
      "Hobart",
      "Holdenville",
      "Hugo",
      "Lawton",
      "McAlester",
      "Miami",
      "Midwest City",
      "Moore",
      "Muskogee",
      "Norman",
      "Oklahoma City",
      "Okmulgee",
      "Pauls Valley",
      "Pawhuska",
      "Perry",
      "Ponca City",
      "Pryor",
      "Sallisaw",
      "Sand Springs",
      "Sapulpa",
      "Seminole",
      "Shawnee",
      "Stillwater",
      "Tahlequah",
      "The Village",
      "Tulsa",
      "Vinita",
      "Wewoka",
      "Woodward",
    ],
  },
  Pennsylvania: {
    shorten: "PA",
    cities: [
      "Abington",
      "Aliquippa",
      "Allentown",
      "Altoona",
      "Ambridge",
      "Bedford",
      "Bethlehem",
      "Bloomsburg",
      "Bradford",
      "Bristol",
      "Carbondale",
      "Carlisle",
      "Chambersburg",
      "Chester",
      "Columbia",
      "Easton",
      "Erie",
      "Franklin",
      "Germantown",
      "Gettysburg",
      "Greensburg",
      "Hanover",
      "Harmony",
      "Harrisburg",
      "Hazleton",
      "Hershey",
      "Homestead",
      "Honesdale",
    ],
  },
  "Rhode Island": {
    shorten: "RI",
    cities: [
      "Barrington",
      "Bristol",
      "Central Falls",
      "Cranston",
      "East Greenwich",
      "East Providence",
      "Kingston",
      "Middletown",
      "Narragansett",
      "Newport",
      "North Kingstown",
      "Pawtucket",
      "Portsmouth",
      "Providence",
      "South Kingstown",
      "Tiverton",
      "Warren",
      "Warwick",
      "Westerly",
      "Wickford",
      "Woonsocket",
    ],
  },
  "South Carolina": {
    shorten: "SC",
    cities: [
      "Abbeville",
      "Aiken",
      "Anderson",
      "Beaufort",
      "Camden",
      "Charleston",
      "Columbia",
      "Darlington",
      "Florence",
      "Gaffney",
      "Georgetown",
      "Greenville",
      "Greenwood",
      "Hartsville",
      "Lancaster",
      "Mount Pleasant",
      "Myrtle Beach",
      "Orangeburg",
      "Rock Hill",
      "Spartanburg",
      "Sumter",
      "Union",
    ],
  },
  "South Dakota": {
    shorten: "SD",
    cities: [
      "Aberdeen",
      "Belle Fourche",
      "Brookings",
      "Canton",
      "Custer",
      "De Smet",
      "Deadwood",
      "Hot Springs",
      "Huron",
      "Lead",
      "Madison",
      "Milbank",
      "Mitchell",
      "Mobridge",
      "Pierre",
      "Rapid City",
      "Sioux Falls",
      "Spearfish",
      "Sturgis",
      "Vermillion",
      "Watertown",
      "Yankton",
    ],
  },
  Tennessee: {
    shorten: "TN",
    cities: [
      "Alcoa",
      "Athens",
      "Chattanooga",
      "Clarksville",
      "Cleveland",
      "Columbia",
      "Cookeville",
      "Dayton",
      "Elizabethton",
      "Franklin",
      "Gallatin",
      "Gatlinburg",
      "Greeneville",
      "Jackson",
      "Johnson City",
      "Jonesborough",
      "Kingsport",
      "Knoxville",
      "Lebanon",
      "Maryville",
      "Memphis",
      "Morristown",
      "Murfreesboro",
      "Nashville",
      "Norris",
      "Oak Ridge",
      "Shelbyville",
      "Tullahoma",
    ],
  },
  Texas: {
    shorten: "TX",
    cities: [
      "Abilene",
      "Alpine",
      "Amarillo",
      "Arlington",
      "Austin",
      "Baytown",
      "Beaumont",
      "Big Spring",
      "Borger",
      "Brownsville",
      "Bryan",
      "Canyon",
      "Cleburne",
      "College Station",
      "Corpus Christi",
      "Crystal City",
      "Dallas",
      "Del Rio",
      "Denison",
      "Denton",
      "Eagle Pass",
      "Edinburg",
      "El Paso",
      "Fort Worth",
      "Freeport",
      "Galveston",
      "Garland",
      "Goliad",
      "Greenville",
      "Harlingen",
      "Houston",
      "Huntsville",
      "Irving",
      "Johnson City",
      "Kilgore",
      "Killeen",
      "Kingsville",
      "Laredo",
      "Longview",
      "Lubbock",
      "Lufkin",
      "Marshall",
      "McAllen",
      "McKinney",
      "Mesquite",
      "Midland",
      "Mission",
      "Nacogdoches",
      "New Braunfels",
      "Odessa",
      "Orange",
      "Pampa",
      "Paris",
      "Pasadena",
      "Pecos",
      "Pharr",
      "Plainview",
      "Plano",
      "Port Arthur",
      "Port Lavaca",
      "Richardson",
      "San Angelo",
      "San Antonio",
      "San Felipe",
      "San Marcos",
      "Sherman",
      "Sweetwater",
      "Temple",
      "Texarkana",
      "Texas City",
      "Tyler",
      "Uvalde",
      "Victoria",
      "Waco",
      "Weatherford",
      "Wichita Falls",
      "Ysleta",
    ],
  },
  Utah: {
    shorten: "UT",
    cities: [
      "Alta",
      "American Fork",
      "Bountiful",
      "Brigham City",
      "Cedar City",
      "Clearfield",
      "Delta",
      "Fillmore",
      "Green River",
      "Heber City",
      "Kanab",
      "Layton",
      "Lehi",
      "Logan",
      "Manti",
      "Moab",
      "Monticello",
      "Murray",
      "Nephi",
      "Ogden",
      "Orderville",
      "Orem",
      "Panguitch",
      "Park City",
      "Payson",
      "Price",
      "Provo",
      "Saint George",
      "Salt Lake City",
      "Spanish Fork",
      "Springville",
      "Tooele",
      "Vernal",
    ],
  },
  Vermont: {
    shorten: "VT",
    cities: [
      "Barre",
      "Bellows Falls",
      "Bennington",
      "Brattleboro",
      "Burlington",
      "Essex",
      "Manchester",
      "Middlebury",
      "Montpelier",
      "Newport",
      "Plymouth",
      "Rutland",
      "Saint Albans",
      "Saint Johnsbury",
      "Sharon",
      "Winooski",
    ],
  },
  "West Virginia": {
    shorten: "WV",
    cities: [
      "Bath",
      "Beckley",
      "Bluefield",
      "Buckhannon",
      "Charles Town",
      "Charleston",
      "Clarksburg",
      "Elkins",
      "Fairmont",
      "Grafton",
      "Harpers Ferry",
      "Hillsboro",
      "Hinton",
      "Huntington",
      "Keyser",
      "Lewisburg",
      "Logan",
      "Martinsburg",
      "Morgantown",
      "Moundsville",
      "New Martinsville",
      "Parkersburg",
      "Philippi",
      "Point Pleasant",
      "Princeton",
      "Romney",
      "Shepherdstown",
      "South Charleston",
      "Summersville",
      "Weirton",
      "Welch",
      "Wellsburg",
      "Weston",
      "Wheeling",
      "White Sulphur Springs",
      "Williamson",
    ],
  },
  Wisconsin: {
    shorten: "WI",
    cities: [
      "Appleton",
      "Ashland",
      "Baraboo",
      "Belmont",
      "Beloit",
      "Eau Claire",
      "Fond du Lac",
      "Green Bay",
      "Hayward",
      "Janesville",
      "Kenosha",
      "La Crosse",
      "Lake Geneva",
      "Madison",
      "Manitowoc",
      "Marinette",
      "Menasha",
      "Milwaukee",
      "Neenah",
      "New Glarus",
      "Oconto",
      "Oshkosh",
      "Peshtigo",
      "Portage",
      "Prairie du Chien",
      "Racine",
      "Rhinelander",
      "Ripon",
      "Sheboygan",
      "Spring Green",
      "Stevens Point",
      "Sturgeon Bay",
      "Superior",
      "Waukesha",
      "Wausau",
      "Wauwatosa",
      "West Allis",
      "West Bend",
      "Wisconsin Dells",
    ],
  },
  Wyoming: {
    shorten: "WY",
    cities: [
      "Buffalo",
      "Casper",
      "Cheyenne",
      "Cody",
      "Douglas",
      "Evanston",
      "Gillette",
      "Green River",
      "Jackson",
      "Lander",
      "Laramie",
      "Newcastle",
      "Powell",
      "Rawlins",
      "Riverton",
      "Rock Springs",
      "Sheridan",
      "Ten Sleep",
      "Thermopolis",
      "Torrington",
      "Worland",
    ],
  },
};

const areasOfPractice = [
  "Accountants Liability",
  "Administrative Hearings and Appeals",
  "Administrative Law",
  "Admiralty and Maritime Law",
  "Adoptions",
  "Advertising and Marketing",
  "Affirmative Action",
  "Affordable Housing",
  "Agency and Distributorships",
  "Agents and Brokers Liability",
  "Agricultural Law",
  "Airbag Injury",
  "Airplane Crash Litigation",
  "Alcoholic Beverages",
  "Alternative Dispute Resolution",
  "Americans with Disabilities Act",
  "Amusement Park Liability",
  "Animal Law",
  "Animal Rights",
  "Annulment",
  "Antitrust and Trade Regulation",
  "Appellate Practice",
  "Arbitration",
  "Architects and Engineers Liability",
  "Asbestos Litigation",
  "Assault",
  "Asset Protection",
  "Asset Recovery",
  "Asylum",
  "Automobile Accidents",
  "Automobile Insurance",
  "Automotive Products Liability",
  "Aviation Law",
  "Banking Law",
  "Bankruptcy",
  "Bankruptcy Chapter 11",
  "Bankruptcy Chapter 13",
  "Bankruptcy Chapter 7",
  "Benzene Exposure",
  "Beryllium Exposure",
  "Biotechnology",
  "Birth Injuries",
  "Black Lung",
  "Boating Accidents",
  "Breach of Contract",
  "Business Enterprises",
  "Business Formation",
  "Business Interruption Claims",
  "Business Law",
  "Business Litigation",
  "Business Planning",
  "Buying and Selling of Businesses",
  "Cannabis Law",
  "Carbon Monoxide Poisoning",
  "Casinos and Gambling",
  "Cerebral Palsy",
  "Chancery and Equity",
  "Charitable Giving",
  "Charter Parties",
  "Child Abuse and Neglect",
  "Child Custody",
  "Child Support",
  "Chinese Drywall",
  "Citizenship",
  "Civil Litigation",
  "Civil Practice",
  "Civil Rights",
  "Civil Service Appeals",
  "Civil Unions",
  "Class Actions",
  "Closely Held Business Law",
  "Collaborative Family Law",
  "Collections",
  "Commercial Banking",
  "Commercial Bankruptcy",
  "Commercial Insurance",
  "Commercial Law",
  "Commercial Leasing",
  "Commercial Litigation",
  "Commercial Real Estate",
  "Commodities",
  "Communications and Media",
  "Complex Litigation",
  "Complex and Multi-District Litigation",
  "Computers and Software",
  "Condominium Law",
  "Constitutional Law",
  "Construction Accidents",
  "Construction Defects",
  "Construction Law",
  "Construction Litigation",
  "Consular Law",
  "Consumer Banking",
  "Consumer Bankruptcy",
  "Consumer Fraud",
  "Consumer Law",
  "Contested Wills",
  "Contracts",
  "Conveyancing",
  "Cooperative Housing Law",
  "Copyrights",
  "Corporate Commercial Law",
  "Corporate Finance",
  "Corporate Governance",
  "Corporate Law",
  "Corporate Litigation",
  "Corporate Taxation",
  "Credit Fraud",
  "Credit Repair",
  "Creditors Rights",
  "Creosote Exposure",
  "Criminal Law",
  "Cruise Ship Injuries",
  "Cryptocurrency Law",
  "Customs Law",
  "DUI and DWI",
  "Death Penalty",
  "Debt Relief",
  "Debtor and Creditor",
  "Deep Vein Thrombosis",
  "Dental Malpractice",
  "Deportation",
  "Directors and Officers Liability",
  "Discrimination",
  "Divorce",
  "Dog Bites",
  "Domestic Partnerships",
  "Domestic Violence",
  "Drivers License Suspension",
  "Drug Crimes",
  "Drug and Medical Device Litigation",
  "E Coli Contamination",
  "E-Commerce",
  "ERISA",
  "Easements",
  "Education Law",
  "Elder Law",
  "Election, Campaign and Political Law",
  "Eminent Domain",
  "Employee Benefits",
  "Employment Contracts",
  "Energy",
  "Energy Regulation",
  "Entertainment Law",
  "Environmental Cleanup",
  "Environmental Law",
  "Environmental Permitting",
  "Equine Law",
  "Equipment Finance and Leasing",
  "Erbs Palsy",
  "Estate Litigation",
  "Estate Planning",
  "Estate and Gift Taxation",
  "Executive Compensation",
  "Expungements",
  "Failure to Diagnose",
  "Fair Housing",
  "Family Business Law",
  "Family Law",
  "Family Mediation",
  "Family and Medical Leave Act",
  "Fathers Rights",
  "Federal Criminal Law",
  "Felonies",
  "Fidelity and Surety",
  "Finance",
  "Financial Services Law",
  "Food Products Liability",
  "Food, Drug and Cosmetics",
  "Foreclosures",
  "Franchises and Franchising",
  "Gaming Law",
  "Gastric Bypass Surgery Malpractice",
  "Gay Divorce",
  "Gay and Lesbian Family Law",
  "Gay and Lesbian Rights",
  "General Practice",
  "Government",
  "Government Contracts",
  "Government Procurement",
  "Government Relations",
  "Green Cards",
  "Guardian Ad Litems",
  "Guardianship and Conservatorship",
  "Harassment",
  "Head and Spinal Injuries",
  "Health Care",
  "Health Insurance",
  "Helicopter Crash Litigation",
  "Homeowners Association Law",
  "Homicide",
  "Hospital Law",
  "Hospitality Law",
  "Housing Law",
  "Human Resources Law",
  "Identity Theft",
  "Immigration",
  "Import and Export Law",
  "Income Tax",
  "Indian Gaming Law",
  "Indians and Native Populations",
  "Information Technology",
  "Inheritance",
  "Initial Public Offerings",
  "Insurance",
  "Insurance Bad Faith",
  "Insurance Defense",
  "Intellectual Property",
  "Intellectual Property Licensing",
  "International Law",
  "International Trade",
  "Internet Law",
  "Investments",
  "Joint Ventures",
  "Jones Act",
  "Juvenile Law",
  "LGBT Law",
  "Labor and Employment",
  "Landlord and Tenant Law",
  "Lasik Surgery Malpractice",
  "Law Enforcement",
  "Lawsuit Funding",
  "Lead Poisoning",
  "Leases and Leasing",
  "Legal Ethics and Professional Responsibility",
  "Legal Malpractice",
  "Legal Separation",
  "Legislative Practice",
  "Lemon Law",
  "Libel, Slander and Defamation",
  "Life and Health Insurance",
  "Limited Liability Company Law",
  "Liposuction Malpractice",
  "Liquor Liability",
  "Liquor Licensing",
  "Litigation",
  "Living Wills",
  "Loan Modification",
  "Lobbying",
  "Long Term Care",
  "Long Term Disability",
  "Longshore and Harbor Workers Compensation Act",
  "Lottery Law",
  "Lung Cancer",
  "Lyft Accidents",
  "Malicious Prosecution",
  "Maritime Personal Injury",
  "Mass Torts",
  "Mechanics Liens",
  "Mediation",
  "Medical Malpractice",
  "Medicare and Medicaid",
  "Mergers, Acquisitions and Divestitures",
  "Mesothelioma",
  "Methamphetamine Crimes",
  "Military Divorce",
  "Military Law",
  "Mining and Minerals",
  "Misdemeanors",
  "Mold Litigation",
  "Mortgages",
  "Motorcycle Accidents",
  "Municipal Law",
  "Natural Resources",
  "Negligence",
  "Nonprofit and Charitable Organizations",
  "Nursing Home Litigation",
  "Occupational Safety and Health (OSHA)",
  "Oil and Gas",
  "Pardons",
  "Parole and Probation",
  "Partnership Law",
  "Patents",
  "Paternity",
  "Payday Loans",
  "Pension and Profit Sharing Plans",
  "Personal Injury",
  "Police Misconduct",
  "Powers of Attorney",
  "Premarital Agreements",
  "Premises Liability",
  "Prisoners Rights",
  "Privacy Law",
  "Products Liability",
  "Professional Liability",
  "Professional Practices",
  "Project Finance",
  "Property Damage",
  "Property Insurance",
  "Property Law",
  "Property Tax",
  "Property Tax Appeals",
  "Public Finance",
  "Qui Tam Litigation",
  "Quiet Title",
  "RICO",
  "Railroad Accidents",
  "Real Estate",
  "Regulatory Law",
  "Reinsurance",
  "Religious Institutions",
  "Residential Real Estate",
  "Resort Timeshares",
  "Resorts and Leisure",
  "Restraining Orders",
  "Same Sex Marriage",
  "School Law",
  "Seat Belt Injury",
  "Securities",
  "Securities Fraud",
  "Sex Crimes",
  "Sexting",
  "Sexual Abuse",
  "Sexual Harassment",
  "Shipping",
  "Sinkhole Claims",
  "Slip and Fall",
  "Small Business Law",
  "Social Security",
  "Social Security Disability",
  "Special Education",
  "Sports Law",
  "Spousal Support",
  "Strategic Alliances",
  "Surrogacy Law",
  "Taft-Hartley Plans",
  "Tax Audits",
  "Tax Planning",
  "Taxation",
  "Technology and Science",
  "Telecommunications Law",
  "Theft",
  "Torts",
  "Toxic Torts",
  "Trade Secrets",
  "Trademarks",
  "Traffic Violations",
  "Transportation",
  "Travel and Tourism",
  "Tribal Law",
  "Trucking Accidents",
  "Trusts and Estates",
  "Uber Accidents",
  "Unfair Competition",
  "Utility Law",
  "Venture Capital",
  "Veterans Benefits",
  "Vinyl Chloride Exposure",
  "Visitation Rights",
  "Wage and Hour Law",
  "Warranty Law",
  "Water Law",
  "Weapons Charges",
  "Welding Rod Litigation",
  "Wetlands",
  "Whiplash",
  "Whistleblower Litigation",
  "White Collar Crime",
  "Wills and Probate",
  "Work Permits",
  "Workers Compensation",
  "Wrongful Death",
  "Wrongful Termination",
  "Zoning, Planning and Land Use",
];

/**
 * Extracts the geolocation in the format "City, StateAbbreviation" or "State, U.S.A."
 * @param {string} glfValueInput - The geolocation input from the user.
 * @returns {string|null} - The formatted geolocation or null if not found.
 */
function extractGeoLocation(glfValueInput) {
  glfValueInput = glfValueInput.trim();

  // Check if input matches a state name or its abbreviation
  for (const state in usaStatesAndCities) {
    const stateNameLower = state.toLowerCase();
    const stateAbbrLower = usaStatesAndCities[state].shorten.toLowerCase();
    const inputLower = glfValueInput.toLowerCase();

    if (inputLower === stateNameLower || inputLower === stateAbbrLower) {
      return `${state}, U.S.A.`;
    }
  }

  // If input contains a comma, assume "City, State" format
  if (glfValueInput.includes(",")) {
    let [inputCity, inputStatePov] = glfValueInput
      .split(",")
      .map((s) => s.trim());

    if (inputCity && inputStatePov) {
      for (const state in usaStatesAndCities) {
        const statePov = usaStatesAndCities[state].shorten.toLowerCase();
        const cities = usaStatesAndCities[state].cities.map((city) =>
          city.toLowerCase(),
        );

        if (
          cities.includes(inputCity.toLowerCase()) &&
          inputStatePov.toLowerCase() === statePov
        ) {
          // Capitalize state abbreviation
          const stateAbbrUpper =
            usaStatesAndCities[state].shorten.toUpperCase();
          // Retrieve original city name casing
          const originalCity = usaStatesAndCities[state].cities.find(
            (city) => city.toLowerCase() === inputCity.toLowerCase(),
          );
          return `${originalCity}, ${stateAbbrUpper}`;
        }
      }
    }
  } else {
    // Assume input is a city only, attempt to find the state
    const inputCityLower = glfValueInput.toLowerCase();
    for (const state in usaStatesAndCities) {
      const cities = usaStatesAndCities[state].cities.map((city) =>
        city.toLowerCase(),
      );
      if (cities.includes(inputCityLower)) {
        const statePov = usaStatesAndCities[state].shorten.toUpperCase();
        // Retrieve original city name casing
        const originalCity = usaStatesAndCities[state].cities.find(
          (city) => city.toLowerCase() === inputCityLower,
        );
        return `${originalCity}, ${statePov}`;
      }
    }
  }

  return null;
}

/**
 * Extracts the area of interest from user input.
 * @param {string} userInput - The area of interest input from the user.
 * @returns {string|null} - The matched area of interest or null if not found.
 */
function extractAreaOfInterest(userInput) {
  userInput = userInput.trim().toLowerCase();
  const matchedArea = areasOfPractice.find(
    (area) => userInput === area.toLowerCase(),
  );
  return matchedArea || null;
}

/**
 * Performs a search using the Tavily client with customizable options.
 *
 * @param {string} query - The search query string. Default is "Who is Leo Messi?".
 * @param {string} searchDepth - Determines the thoroughness of the search.
 *   - "basic": Standard search with quicker results.
 *   - "advanced": More comprehensive search with detailed results.
 *   - Default is "advanced".
 * @param {string} topic - Specifies the category of the search, influencing the search agent used.
 *   - Options include:
 *     - "general": Standard search across various topics.
 *     - "news": Focuses on recent news articles.
 *   - Default is "general".
 * @param {number} days - Sets the time frame for search results, looking back a specified number of days.
 *   - Only applicable when the topic is set to "news".
 *   - Default is 7 days.
 * @param {number} maxResults - Limits the maximum number of search results returned.
 *   - Default is 10.
 * @param {boolean} includeImages - Indicates whether to include a list of images related to the query in the response.
 *   - Default is true.
 * @param {boolean} includeImageDescriptions - When `includeImages` is true, adds descriptive text for each image.
 *   - Default is true.
 * @param {boolean} includeAnswer - Includes a short answer to the original query, generated by an LLM based on Tavily's search results.
 *   - Default is true.
 * @param {boolean} includeRawContent - Includes the cleaned and parsed HTML content of each search result.
 *   - Default is false.
 * @param {Array<string>} includeDomains - An array of specific domains to include in the search results.
 *   - Default is undefined, which includes all domains.
 * @param {Array<string>} excludeDomains - An array of specific domains to exclude from the search results.
 *   - Default is undefined, which doesn't exclude any domains.
 * @param {number} maxTokens - Sets the maximum number of tokens for the response.
 *   - Default is undefined, allowing up to 4000 tokens.
 */
async function rawTavilySearch(
  query,
  searchDepth = "advanced",
  topic = "general",
  days = 7,
  maxResults = 10,
  includeImages = true,
  includeImageDescriptions = true,
  includeAnswer = true,
  includeRawContent = false,
  includeDomains = undefined,
  excludeDomains = undefined,
  maxTokens = undefined,
) {
  const options = {
    searchDepth,
    topic,
    days,
    maxResults,
    includeImages,
    includeImageDescriptions,
    includeAnswer,
    includeRawContent,
    includeDomains,
    excludeDomains,
    maxTokens,
  };

  let startTime = Date.now();

  const response = await tvly.search(query, options);

  let runtime = Date.now() - startTime;

  return {
    runtime_ms: runtime,
    options: options,
    response: response,
  };
}

async function fetchYouTubeData(videoUrl) {
  // extract video's id
  let videoId = null;
  try {
    const urlObj = new URL(videoUrl);
    if (urlObj.hostname.includes("youtube.com")) {
      videoId = urlObj.searchParams.get("v");
    } else if (urlObj.hostname.includes("youtu.be")) {
      videoId = urlObj.pathname.substring(1);
    }
  } catch {
    throw new Error("invalid YouTube url");
  }

  if (!videoId) {
    throw new Error("could not extract a valid YouTube video id");
  }

  // extract video's transcript
  let transcript;
  try {
    const transcriptArray = await YoutubeTranscript.fetchTranscript(videoId);
    transcript = transcriptArray.map((seg) => seg.text).join(" ");
  } catch {
    transcript = null;
  }

  // extract video's metadata
  const response = await axios.get(videoUrl, {
    headers: {
      "User-Agent":
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) " +
        "Chrome/91.0.4472.124 Safari/537.36",
      Accept:
        "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
      "Accept-Language": "en-US,en;q=0.5",
    },
    timeout: 5000,
  });

  const match = response.data.match(
    /ytInitialPlayerResponse\s*=\s*({[\s\S]+?});(?:\s*var|\s*<\/script>)/,
  );

  if (!match) {
    throw new Error("could not parse metadata from the YouTube page");
  }

  const ytInitialPlayerResponse = JSON.parse(match[1]);
  const videoDetails = ytInitialPlayerResponse.videoDetails;
  const microformat =
    ytInitialPlayerResponse.microformat?.playerMicroformatRenderer;

  return {
    id: videoDetails.videoId,
    title: videoDetails.title,
    uploader: videoDetails.author,
    upload_date: microformat?.uploadDate,
    duration: videoDetails.lengthSeconds,
    view_count: videoDetails.viewCount,
    description: videoDetails.shortDescription,
    thumbnail:
      videoDetails.thumbnail?.thumbnails?.[
        videoDetails.thumbnail.thumbnails.length - 1
      ]?.url,
    transcript: transcript,
  };
}

async function scrapeWebsite(url, typeOfScrape = "cleaned") {
  if (!process.env.WEBCRAWLER_API_KEY) {
    throw new Error("environment variable for scraping is not set");
  }

  const client = new WebcrawlerClient(process.env.WEBCRAWLER_API_KEY);
  const job = await client.crawl({
    input: {
      url,
      type: typeOfScrape,
    },
    crawler_id: "webcrawler/crawler",
    items_limit: 1,
    allow_subdomains: false,
  });

  if (
    !job ||
    job.status !== "done" ||
    !job.job_items ||
    job.job_items.length === 0
  ) {
    throw new Error("no crawl items returned or job incomplete");
  }

  let combinedContent = "";
  for (const item of job.job_items) {
    if (item.status === "done") {
      const content = await item.getContent();
      if (content) combinedContent += content;
    }
  }

  if (typeOfScrape === "html" && combinedContent) {
    const $ = cheerio.load(combinedContent);
    $("style, script").remove();
    combinedContent = $.text().replace(/\s+/g, " ").trim();
  }

  return {
    url,
    current_date_utc: new Date().toISOString(),
    content: combinedContent.trim() || "failed to scrape content website",
  };
}

//////////////////////////////////////////////////[EXPORTS]//////////////////////////////////////////////////

export function generateMartindaleURL(functionParams) {
  let { term, geoLocationInputs, areaInterestInputs } = functionParams;

  if (term === undefined) {
    term = "";
  }

  if (geoLocationInputs === undefined) {
    geoLocationInputs = [];
  }

  if (areaInterestInputs === undefined) {
    areaInterestInputs = [];
  }

  // Process geolocations
  const glfValues = geoLocationInputs
    .map((input) => extractGeoLocation(input))
    .filter((value) => value !== null);

  // Process areas of interest
  const areaInterests = areaInterestInputs
    .map((input) => extractAreaOfInterest(input))
    .filter((value) => value !== null);

  const params = {
    type: "people",
    page: 1,
    limit: 25,
    prOverallScore: ["4to5"],
  };

  if (glfValues.length > 0) {
    params.geoLocationFacet = glfValues;
  }
  if (areaInterests.length > 0) {
    params.practiceAreas = areaInterests;
  }
  if (term.length > 0) {
    params.term = term;
  }

  const jsonData = JSON.stringify(params);
  const encodedParams = Buffer.from(jsonData).toString("base64");

  // (1-14-2025) currently this is the root URL for Martin-Dale
  const url = `https://www.martindale.com/search/attorneys/?params=${encodedParams}`;

  // console.log(`\n${JSON.stringify(params, null, indent=4)}\n`)

  return { url, params };
}

export async function externalWebScraper(params) {
  let { url } = params

  const youtubeRegex = /(youtube\.com\/watch\?v=|youtu\.be\/)/;
  const isYouTube = youtubeRegex.test(url);

  try {
    if (isYouTube) {
      const output = await fetchYouTubeData(url);
      return JSON.stringify(output);
    } else {
      const scrapeResult = await scrapeWebsite(url);
      return JSON.stringify(scrapeResult);
    }
  } catch (err) {
    return `failed to do web scrape due to ${err}`;
  }
}

export async function tavilySearch(parameters) {
  // (1-17-2025) hard-coded limit to prevent long processing time
  parameters.searchDepth = "basic";
  parameters.maxResults = 2;
  parameters.includeImageDescriptions = false;
  parameters.includeAnswer = false;
  parameters.includeRawContent = false;
  parameters.includeDomains = undefined;
  parameters.excludeDomains = undefined;
  parameters.maxTokens = undefined;

  return await rawTavilySearch(
    parameters.query,
    parameters.searchDepth,
    parameters.topic,
    parameters.days,
    parameters.maxResults,
    parameters.includeImages,
    parameters.includeImageDescriptions,
    parameters.includeAnswer,
    parameters.includeRawContent,
    parameters.includeDomains,
    parameters.excludeDomains,
    parameters.maxTokens,
  );
}

export async function parseAndAnalyzeTheContract(params) {
  try {
    // https://console.groq.com/docs/models
    // https://groq.com/pricing/
    const model_name = "deepseek-r1-distill-qwen-32b";
    const timeout_ms = 60_000;

    let { original_prompt, contract } = params;

    let user_prompt = `
You are an expert analyst tasked with providing the best possible answer to this question:

---
${original_prompt}
---

To support your analysis, here is the full text of a contract or document:

---
${contract}
---

Your goal is to meticulously analyze the contract and extract all specific substrings (short, precise phrases or words) that are relevant to answering "${original_prompt}" as accurately and comprehensively as possible. Your response should provide the full sentence contexts from the contract for these substrings to ground your reasoning and conclusions. Follow these steps:

1. Thoroughly review the contract to identify any sections, clauses, or phrases that directly or indirectly address the question.
2. Extract the most relevant substrings (e.g., key phrases or words) verbatim, keeping their exact wording as they appear in the contract, rather than entire sentences or paragraphs.
3. For each extracted substring, identify the full sentence or sentences from the contract that contain it, noting the exact location (e.g., Article 1, Paragraph 3).
4. Provide a clear explanation of how each extracted substring relates to or informs the answer to the question, including any insights or implications.
5. Synthesize a well-reasoned final answer that integrates the extracted substrings, supported by the full sentences from the contract.

Format your response as follows:

- **Extracted Substrings and Analysis**

  1. [substring]
     - Contract Context: [full sentence from contract]
     - Location: [location in contract]
     - Explanation: [explanation of relevance]

  2. [substring]
     - Contract Context: [full sentence from contract]
     - Location: [location in contract]
     - Explanation: [explanation of relevance]

  ... (and so on for each substring)

- **Conclusion**

  [clear, concise answer referencing the cited substrings and their full sentences]

If no relevant substrings are found in the contract:

- Explicitly state that no applicable content was identified.
- Explain why the contract lacks relevant information (e.g., topic mismatch or insufficient detail).
- Provide a general, well-informed answer to "${original_prompt}" based on your broader knowledge, noting the absence of contract support.

Ensure that each "Contract Context:" is the exact sentence or sentences from the contract that contain the extracted substring, without any modifications or omissions. The "Location:" should accurately specify where this sentence is found in the contract.
`;

    const url = "https://api.groq.com/openai/v1/chat/completions";
    const payload = {
      model: model_name,
      messages: [{ role: "user", content: user_prompt }],
    };
    const response = await axios.post(url, payload, {
      headers: {
        Authorization: `Bearer ${process.env.GROQ_API_KEY}`,
        "Content-Type": "application/json",
      },
      timeout: timeout_ms,
    });
    return response.data.choices[0].message.content;
  } catch (error) {
    let err_msg = `request failed due to ${error}`;
    if (error.code === "ECONNABORTED") {
      err_msg = `request failed due to timeout`;
    }
    return err_msg;
  }
}

export const externalWebScraperToolDescription = {
  type: "function",
  function: {
    name: "externalWebScraper",
    description:
      "Scrapes the provided URL (webpage or YouTube). If the URL is a regular webpage, returns scraped text in JSON. If it's a YouTube link, returns metadata about the video (title, uploader, upload date, etc.) and transcript if available. The typeOfScrape parameter may be 'cleaned' or 'html'.",
    parameters: {
      type: "object",
      properties: {
        url: {
          type: "string",
          description:
            "The URL to scrape or fetch data from (e.g., https://example.com, https://www.youtube.com/watch?v=abc123).",
        },
      },
      required: ["url"],
    },
  },
};

export const parseAndAnalyzeToolDescription = {
  type: "function",
  function: {
    name: "parseAndAnalyzeTheContract",
    description:
      "Analyzes the provided legal contract or any textual document in response to a specific user prompt/question. The function extracts relevant phrases (with context) from the contract and synthesizes a conclusive answer. If the contract does not address the prompt, it provides a broader response noting the lack of relevant contract details.",
    parameters: {
      type: "object",
      properties: {
        original_prompt: {
          type: "string",
          description:
            "The user's question or task that the function should answer by referencing the contract.",
        },
        // contract: {
        //   type: "string",
        //   description:
        //     "The full text of the contract or document to be analyzed."
        // },
      },
      required: [
        "original_prompt",
        // "contract"
      ],
    },
  },
};

export const martindaleToolDescription = {
  type: "function",
  function: {
    name: "generateMartindaleURL",
    description:
      "Generates a URL for the Martindale search engine to find lawyers based on specific search criteria. This tool allows users to provide parameters such as search terms, geographic locations, and areas of legal interest, facilitating tailored and efficient searches.",
    parameters: {
      type: "object",
      properties: {
        term: {
          type: "string",
          description: "A keyword or phrase used to refine the lawyer search.",
          example: "real estate",
        },
        geoLocationInputs: {
          type: "array",
          items: { type: "string" },
          description:
            "List of geographic locations (e.g., 'Denver, CO', 'Colorado', etc).",
          example: ["Denver, CO", "Los Angeles, CA"],
        },
        areaInterestInputs: {
          type: "array",
          items: {
            type: "string",
            enum: areasOfPractice,
          },
          description:
            "List of legal practice areas (e.g., 'Real Estate', 'Divorce', etc).",
          example: [
            "Real Estate",
            "Divorce",
            "Civil Litigation",
            "Family Law",
            "Wills and Probate",
            "Criminal Law",
            "Estate Planning",
            "Bankruptcy",
            "Landlord and Tenant Law",
            "Trusts and Estates",
            "Immigration",
            "Social Security Disability",
            "Medical Malpractice",
            "Labor and Employment",
            "Personal Injury",
            "Traffic Violations",
            "DUI and DWI",
            "General Practice",
            "Lottery Law",
            "Property Damage",
          ],
        },
      },
      required: ["term", "geoLocationInputs"],
    },
  },
};

export const searchToolDescription = {
  type: "function",
  function: {
    name: "tavilySearch",
    description:
      "Performs a search using the Tavily client with customizable options...",
    parameters: {
      type: "object",
      properties: {
        query: {
          type: "string",
          description: "The search query string.",
          example: "Who is Leo Messi?",
        },
        searchDepth: {
          type: "string",
          description: "Determines the thoroughness of the search.",
          enum: ["basic", "advanced"],
        },
        topic: {
          type: "string",
          description:
            "Specifies the category of the search, influencing the search agent used.",
          enum: ["general", "news"],
        },
        days: {
          type: "number",
          description:
            "Sets the time frame for search results in days. Only applies for news.",
        },
        maxResults: {
          type: "number",
          description: "Limits the maximum number of results returned.",
        },
        includeImages: {
          type: "boolean",
          description: "Includes a list of related images.",
        },
        includeImageDescriptions: {
          type: "boolean",
          description:
            "Adds descriptive text for each image when includeImages is true.",
        },
        includeAnswer: {
          type: "boolean",
          description: "Includes a short answer to the query.",
        },
        includeRawContent: {
          type: "boolean",
          description:
            "Includes cleaned and parsed HTML of each search result.",
        },
        includeDomains: {
          type: "array",
          items: { type: "string" },
          description:
            "An array of specific domains to include in the search results.",
        },
        excludeDomains: {
          type: "array",
          items: { type: "string" },
          description:
            "An array of specific domains to exclude from the search results.",
        },
        maxTokens: {
          type: "number",
          description: "Sets the maximum number of tokens for the response.",
        },
      },
      required: ["query"],
    },
  },
};
