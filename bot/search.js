import { tavily } from "@tavily/core";

const tvly = tavily({ apiKey: process.env.TAVILY_API_KEY });

/**
 * Performs a search using the Tavily client with customizable options.
 *
 * @param {string} query - The search query string. Default is "Who is Leo Messi?".
 * @param {string} searchDepth - Determines the thoroughness of the search.
 *   - "basic": Standard search with quicker results.
 *   - "advanced": More comprehensive search with detailed results.
 *   - Default is "advanced".
 * @param {string} topic - Specifies the category of the search, influencing the search agent used.
 *   - Options include:
 *     - "general": Standard search across various topics.
 *     - "news": Focuses on recent news articles.
 *   - Default is "general".
 * @param {number} days - Sets the time frame for search results, looking back a specified number of days.
 *   - Only applicable when the topic is set to "news".
 *   - Default is 7 days.
 * @param {number} maxResults - Limits the maximum number of search results returned.
 *   - Default is 10.
 * @param {boolean} includeImages - Indicates whether to include a list of images related to the query in the response.
 *   - Default is true.
 * @param {boolean} includeImageDescriptions - When `includeImages` is true, adds descriptive text for each image.
 *   - Default is true.
 * @param {boolean} includeAnswer - Includes a short answer to the original query, generated by an LLM based on Tavily's search results.
 *   - Default is true.
 * @param {boolean} includeRawContent - Includes the cleaned and parsed HTML content of each search result.
 *   - Default is false.
 * @param {Array<string>} includeDomains - An array of specific domains to include in the search results.
 *   - Default is undefined, which includes all domains.
 * @param {Array<string>} excludeDomains - An array of specific domains to exclude from the search results.
 *   - Default is undefined, which doesn't exclude any domains.
 * @param {number} maxTokens - Sets the maximum number of tokens for the response.
 *   - Default is undefined, allowing up to 4000 tokens.
 */
async function rawTavilySearch(
  query,
  searchDepth = "advanced",
  topic = "general",
  days = 7,
  maxResults = 3,
  includeImages = true,
  includeImageDescriptions = true,
  includeAnswer = true,
  includeRawContent = false,
  includeDomains = undefined,
  excludeDomains = undefined,
  maxTokens = undefined,
) {
  const options = {
    searchDepth,
    topic,
    days,
    maxResults,
    includeImages,
    includeImageDescriptions,
    includeAnswer,
    includeRawContent,
    includeDomains,
    excludeDomains,
    maxTokens,
  };

  let startTime = Date.now();

  const response = await tvly.search(query, options);

  let runtime = Date.now() - startTime;

  return {
    runtime_ms: runtime,
    options: options,
    response: response,
  };
}

async function tavilySearch(parameters) {
  return await rawTavilySearch(
    parameters.query,
    parameters.searchDepth,
    parameters.topic,
    parameters.days,
    parameters.maxResults,
    parameters.includeImages,
    parameters.includeImageDescriptions,
    parameters.includeAnswer,
    parameters.includeRawContent,
    parameters.includeDomains,
    parameters.excludeDomains,
    parameters.maxTokens,
  );
}

const searchToolDescription = {
  type: "function",
  function: {
    name: "tavilySearch",
    description:
      "Performs a search using the Tavily client with customizable options, providing comprehensive results tailored to specified parameters.",
    parameters: {
      type: "object",
      properties: {
        query: {
          type: "string",
          description: "The search query string.",
          example: "Who is Leo Messi?",
        },
        searchDepth: {
          type: "string",
          description: "Determines the thoroughness of the search.",
          enum: ["basic", "advanced"],
          default: "advanced",
        },
        topic: {
          type: "string",
          description:
            "Specifies the category of the search, influencing the search agent used.",
          enum: ["general", "news"],
          default: "general",
        },
        days: {
          type: "number",
          description:
            "Sets the time frame for search results in days. Only applicable for news topic.",
          default: 7,
        },
        maxResults: {
          type: "number",
          description: "Limits the maximum number of search results returned.",
          default: 3,
        },
        includeImages: {
          type: "boolean",
          description: "Includes a list of related images.",
          default: true,
        },
        includeImageDescriptions: {
          type: "boolean",
          description:
            "Adds descriptive text for each image when includeImages is true.",
          default: true,
        },
        includeAnswer: {
          type: "boolean",
          description: "Includes a short answer to the query.",
          default: true,
        },
        includeRawContent: {
          type: "boolean",
          description:
            "Includes the cleaned and parsed HTML content of each search result.",
          default: false,
        },
        includeDomains: {
          type: "array",
          items: { type: "string" },
          description:
            "An array of specific domains to include in the search results.",
        },
        excludeDomains: {
          type: "array",
          items: { type: "string" },
          description:
            "An array of specific domains to exclude from the search results.",
        },
        maxTokens: {
          type: "number",
          description: "Sets the maximum number of tokens for the response.",
        },
      },
      required: ["query"],
      additionalProperties: false,
    },
  },
};

export { tavilySearch, searchToolDescription };
